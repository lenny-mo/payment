syntax = "proto3";

package go.micro.service.payment;

option go_package="./payment";

service PaymentService {
	// 发起支付请求	
	// 获取订单ID，查阅order 表 获取 userid, user email, 
	// 根据order_item的ID和timestamp查询价格表 item_price, 相加每件商品价格得到总价
	// 通过paypal查询用户是否有足够余额
	// 如果充足则扣费并且交易记录要直接写入数据库，否则返回余额不足错误
	rpc MakePayment (MakePaymentRequest) returns (MakePaymentResponse);

	// 查询订单支付状态, 根据payment订单的ID
    // 1. 接收GetPaymentStatusRequest中的支付订单ID。
    // 2. 根据支付订单ID查询支付系统数据库，获取当前支付状态。
    // 3. 考虑到支付可能是异步完成的，确保实时或定时查询支付渠道，获取最新状态。
    // 4. 如果长时间未收到支付结果通知，触发主动查询流程，确保及时更新支付状态。
    // 5. 返回支付状态，包括成功、失败、处理中等状态信息。
	rpc GetPaymentStatus (GetPaymentStatusRequest) returns (GetPaymentStatusResponse);
	
	// 更新支付信息
	rpc UpdatePayment (UpdatePaymentRequest) returns (UpdatePaymentResponse);
}

// payment transaction 表结构体
message Payment {
	string TransactionId = 1;	// 下单的时候生成该订单的UUID，以后可以凭借这个ID查到支付信息
	int64 OrderId =2;	// 这个我可以理解为requestId 
	int32 TransactionStatus = 3;
	string PaymentMethod =4;
}

// 
message MakePaymentRequest {
	int64 OrderId = 1;
	int64 UserId = 2;
}

message MakePaymentResponse {
	int32 Code = 1;
	string  CodeMsg = 2; 
	string PaymentID = 3;	// 如果成功，返回入库的UUID，否则返回一个0
}


message GetPaymentStatusRequest {
	string PaymentId = 1;
} 

message GetPaymentStatusResponse {
	Payment PaymentData =1;
}

message UpdatePaymentRequest {
	Payment PaymentData =1;
}

message UpdatePaymentResponse {
	string PaymentId =1;
}